#!/usr/bin/env node
const program = require("commander");
const request = require("request");
const chalk = require("chalk");
const config = require("../config.js");

program
  .command("list [project-name]")
  .description("display project list")
  .action(function(projectName) {
    const url = projectName
      ? `${config.host}/projects?identity=${projectName}`
      : `${config.host}/projects`;
    request(url, function(error, response, body) {
      if (error) {
        chalk.red(error);
      }
      if (!error && response.statusCode === 200) {
        body = JSON.parse(body);
        console.info(body.data);
      }
    });
  });

program
  .command("add <project-name> <host>")
  .description("add a project")
  .option("-n, --name [name]", "project chinese name")
  .action(function(projectName, host, cmd) {
    request(
      {
        url: `${config.host}/projects`,
        method: "POST",
        form: { identity: projectName, name: cmd.name, target: host }
      },
      function(error, response, body) {
        if (error) {
          chalk.red(error);
        }
        if (!error && response.statusCode === 200) {
          body = JSON.parse(body);
          console.info(body.data);
        }
      }
    );
  });

program
  .command("set <project-name>")
  .description("set product info")
  .option("-n, --name [name]", "project chinese name")
  .option("-h, --host [host]", "project host")
  .option("-s, --status [status]", "project proxy open status")
  .action(function(projectName, cmd) {
    const { name, host, status } = cmd;
    request(
      {
        url: `${config.host}/projects`,
        method: "PUT",
        form: { identity: projectName, name, host, status }
      },
      function(error, response, body) {
        if (error) {
          chalk.red(error);
        }
        if (!error && response.statusCode === 200) {
          body = JSON.parse(body);
          console.info(body.data);
        }
      }
    );
  });

program.parse(process.argv);
