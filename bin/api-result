#!/usr/bin/env node
const program = require("commander");
const request = require("request");
const logger = require("../lib/logger");
const setting = require("../lib/setting");
const db = require("../lib/dbinit");
const jsondiffpatch = require("jsondiffpatch");
const serverHost = setting.serverHost();

program
  .command("list [url] [method] [code]")
  .description("list result stack on someone interface")
  .action(function(url, method, code) {
    const workProject = db.get("workProject").value();
    if (!workProject)
      logger.fatal("current work project isn't setted, please go to set.");
    let workInterface = db.get("interface").value();
    if ((url && !method) || (url && method && !code)) {
      logger.fatal("which interface is queried ? please specify!");
    }
    if (!url && Object.keys(workInterface).length === 0) {
      logger.fatal("which interface is queried ? please specify!");
    }
    request(
      {
        url: `${serverHost}/apis/stack`,
        qs: {
          workProject,
          url: url || workInterface.url,
          method: method || workInterface.method,
          code: code || workInterface.code
        }
      },
      function(error, response, body) {
        if (error || response.statusCode !== 200) {
          logger.fatal(error || body);
        }
        if (!error && response.statusCode === 200) {
          body = JSON.parse(body);
          logger.success(body.data);
        }
      }
    );
  });

program
  .command("head [url] [method] [code]")
  .option("-d --desc", "require include result desc")
  .option("-s --set <hash>", "set head to a new one")
  .description("get head stack on someone interface")
  .action(function(url, method, code, cmd) {
    const workProject = db.get("workProject").value();
    if (!workProject)
      logger.fatal("current work project isn't setted, please go to set.");
    let workInterface = db.get("interface").value();
    if ((url && !method) || (url && method && !code)) {
      logger.fatal("which interface is queried ? please specify!");
    }
    if (!url && Object.keys(workInterface).length === 0) {
      logger.fatal("which interface is queried ? please specify!");
    }
    const { desc, set } = cmd;
    request(
      {
        url: `${serverHost}/apis/stack/head`,
        qs: {
          workProject,
          url: url || workInterface.url,
          method: method || workInterface.method,
          code: code || workInterface.code,
          desc,
          set
        }
      },
      function(error, response, body) {
        if (error || response.statusCode !== 200) {
          logger.fatal(error || body);
        }
        if (!error && response.statusCode === 200) {
          body = JSON.parse(body);
          logger.success(body.data);
        }
      }
    );
  });

program
  .command("stable [url] [method] [code]")
  .option("-d --desc", "require include result desc")
  .option("-s --set <hash>", "set stable to a new one")
  .description("get stable stack on someone interface")
  .action(function(url, method, code, cmd) {
    const workProject = db.get("workProject").value();
    if (!workProject)
      logger.fatal("current work project isn't setted, please go to set.");
    let workInterface = db.get("interface").value();
    if ((url && !method) || (url && method && !code)) {
      logger.fatal("which interface is queried ? please specify!");
    }
    if (!url && Object.keys(workInterface).length === 0) {
      logger.fatal("which interface is queried ? please specify!");
    }
    const { desc, set } = cmd;
    request(
      {
        url: `${serverHost}/apis/stack/stable`,
        qs: {
          workProject,
          url: url || workInterface.url,
          method: method || workInterface.method,
          code: code || workInterface.code,
          desc,
          set
        }
      },
      function(error, response, body) {
        if (error || response.statusCode !== 200) {
          logger.fatal(error || body);
        }
        if (!error && response.statusCode === 200) {
          body = JSON.parse(body);
          logger.success(body.data);
        }
      }
    );
  });

program
  .command("get <result-hash>")
  .description("get result info based result-ish")
  .action(function(resultHash) {
    request(
      {
        url: `${serverHost}/apis/stack/${resultHash}`
      },
      function(error, response, body) {
        if (error || response.statusCode !== 200) {
          logger.fatal(error || body);
        }
        if (!error && response.statusCode === 200) {
          body = JSON.parse(body);
          logger.success(body.data);
        }
      }
    );
  });

program
  .command("diff [new-hash] [old-hash] [code]")
  .description("Compare the differences between the two results")
  .action(function(newHash, oldHash, code) {
    if (newHash && !oldHash) {
      logger.fatal("lack diff must params,please specify!");
    }
    if (newHash && oldHash && !code) {
      if (newHash.indexOf("/") !== -1) {
        logger.fatal("lack diff must params,please specify!");
      }
    }
    const workProject = db.get("workProject").value();
    if (!workProject)
      logger.fatal("current work project isn't setted, please go to set.");
    let workInterface = db.get("interface").value();
    if (!newHash && Object.keys(workInterface).length === 0) {
      logger.fatal("which interface is queried ? please specify!");
    }
    request(
      {
        url: `${serverHost}/apis/stack/diff`,
        qs: {
          one: newHash || workInterface.url,
          two: oldHash || workInterface.method,
          workProject,
          code: code || workInterface.code
        }
      },
      function(error, response, body) {
        if (error || response.statusCode !== 200) {
          logger.fatal(error || body);
        }
        if (!error && response.statusCode === 200) {
          body = JSON.parse(body);
          body.data
            ? jsondiffpatch.console.log(body.data)
            : logger.success("no diff");
        }
      }
    );
  });

program
  .command("merge [url] [method] [code]")
  .description("merge result diff")
  .action(function(url, method, code) {
    const workProject = db.get("workProject").value();
    if (!workProject)
      logger.fatal("current work project isn't setted, please go to set.");
    let workInterface = db.get("interface").value();
    if ((url && !method) || (url && method && !code)) {
      logger.fatal("which interface needs merge ? please specify!");
    }
    if (!url && Object.keys(workInterface).length === 0) {
      logger.fatal("which interface needs merge ? please specify!");
    }
    request(
      {
        url: `${serverHost}/apis/stack/merge`,
        method: "PUT",
        form: {
          workProject,
          url: url || workInterface.url,
          method: method || workInterface.method,
          code: code || workInterface.code
        }
      },
      function(error, response, body) {
        if (error || response.statusCode !== 200) {
          logger.fatal(error || body);
        }
        if (!error && response.statusCode === 200) {
          body = JSON.parse(body);
          logger.success(body.data);
        }
      }
    );
  });

program.parse(process.argv);
