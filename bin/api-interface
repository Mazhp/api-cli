#!/usr/bin/env node
const program = require("commander");
const request = require("request");
const chalk = require("chalk");
const logger = require("../lib/logger");
const setting = require("../lib/setting");
const db = require("../lib/dbinit");

const serverHost = setting.serverHost();

program
  .command("list")
  .option("-u, --url [url]", "interface req url")
  .option("-m, --method [method]", "interface req method")
  .description("search interface list")
  .action(function(cmd) {
    const workProject = db.get("workProject").value();
    if (!workProject)
      logger.fatal("current work project isn't setted, please go to set.");

    const { url, method } = cmd;
    request(
      {
        url: `${serverHost}/apis`,
        qs: {
          workProject,
          url,
          method
        }
      },
      function(error, response, body) {
        if (error) {
          logger.fatal(error);
        }
        if (!error && response.statusCode === 200) {
          body = JSON.parse(body);
          logger.success(body.data);
        }
      }
    );
  });

program
  .command("status <url> <method>")
  .description("query interface status")
  .action(function(url, method) {
    const workProject = db.get("workProject").value();
    if (!workProject)
      logger.fatal("current work project isn't setted, please go to set.");
    request(
      {
        url: `${serverHost}/apis/status`,
        qs: {
          workProject,
          url,
          method
        }
      },
      function(error, response, body) {
        if (error || response.statusCode !== 200) {
          logger.fatal(error || body);
        }
        if (!error && response.statusCode === 200) {
          body = JSON.parse(body);
          logger.success(body.data);
        }
      }
    );
  });

program
  .command("use <url> <method> [code]")
  .description("use someone interface")
  .action(function(url, method, code) {
    db.set("interface", { url, method, code }).write();
    logger.success("used interface success.current work interface:%j", {
      url,
      method,
      code
    });
  });

program.parse(process.argv);
